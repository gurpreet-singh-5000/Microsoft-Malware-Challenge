# -*- coding: utf-8 -*-
"""
Created on Sun May 31 18:45:10 2020

@author: Gurpreet Singh
"""

import pandas as pd
import numpy as np
import sklearn
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OneHotEncoder

def transform_catf(df,field,curr):
    arr = onehot_encoder.fit_transform(df[field].values.reshape(4988, 1))
    n=len(arr[0])
    #global curr
    arr=pd.DataFrame(arr)
    for i in range(0,n):
        df[curr]=arr[i]
        curr+=1;
    #df=df.drop(columns=[field])    
    return curr
df = pd.read_csv('latestdata.csv', parse_dates=True, keep_date_col=True)
labels=df['HasDetections']
df=df.drop(columns='HasDetections')
onehot_encoder = OneHotEncoder(sparse=False)
curr=0

curr=transform_catf(df,'ProductName',curr)
df=df.drop(columns=['ProductName'])
#print(curr)
curr=transform_catf(df,'EngineVersion',curr)
df=df.drop(columns=['EngineVersion'])
#print(curr)
curr=transform_catf(df,'AppVersion',curr)
df=df.drop(columns=['AppVersion'])
#print(curr)

curr=transform_catf(df,'Platform',curr)
df=df.drop(columns=['Platform'])
#print(curr)
curr=transform_catf(df,'Processor',curr)
df=df.drop(columns=['Processor'])
#print(curr)
curr=transform_catf(df,'OsVer',curr)
df=df.drop(columns=['OsVer'])
#print(curr)
curr=transform_catf(df,'OsPlatformSubRelease',curr)
df=df.drop(columns=['OsPlatformSubRelease'])
#print(curr)
curr=transform_catf(df,'SkuEdition',curr)
df=df.drop(columns=['SkuEdition'])
#print(curr)
curr=transform_catf(df,'Census_PowerPlatformRoleName',curr)
df=df.drop(columns=['Census_PowerPlatformRoleName'])
#print(curr)
curr=transform_catf(df,'Census_OSBranch',curr)
df=df.drop(columns=['Census_OSBranch'])
#print(curr)
curr=transform_catf(df,'Census_OSEdition',curr)
df=df.drop(columns=['Census_OSEdition'])
#print(curr)
curr=transform_catf(df,'Census_OSInstallTypeName',curr)
df=df.drop(columns=['Census_OSInstallTypeName'])
#print(curr)
curr=transform_catf(df,'Census_GenuineStateName',curr)
df=df.drop(columns=['Census_GenuineStateName'])
#print(curr)
curr=transform_catf(df,'Census_ActivationChannel',curr)
df=df.drop(columns=['Census_ActivationChannel'])
#print(curr)

from sklearn.decomposition import PCA
pca = PCA(n_components=3)
df1=pca.fit_transform(df)
print(pca.explained_variance_ratio_*100)
sum=0
for i in range(0,3):
    sum+=pca.explained_variance_ratio_[i]
"""
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from sklearn import svm

clf = svm.SVC(kernel='linear', C=1)
 
X_train,X_test,Y_train,Y_test=train_test_split(df1,labels,test_size=0.3)
clf.fit(X_train,Y_train)
print(classification_report(Y_test, clf.predict(X_test), target_names=['0','1']))
"""
















